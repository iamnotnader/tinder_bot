// Generated by CoffeeScript 1.8.0
import Pretender from 'pretender';
import { RESPONSES } from '../responses/responses';

export var testServer = function() {
  return new Pretender(function() {
    return this.get('/test', function(request) {
      return [200, {'Content-Type': 'text/plain'}, RESPONSES.test];
    });
  });
};

// TODO(daddy): No idea why but the scoping is messed up here. Maybe the ES6
// export syntax is screwing everything up? In any case, we attach this function
// to the window so we can access it in createUserServer. Also for some reason
// request.params doesn't work in the pretender, which is why we need this function
// in the first place...
window.getQueryParam = function (query, variable) {
  var vars = query.split('&');
  for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split('=');
      if (decodeURIComponent(pair[0]) === variable) {
          return decodeURIComponent(pair[1]);
      }
  }
  console.log('Query variable %s not found', variable);
};

export var createUserServer = function() {
  return new Pretender(function() {
    // daddy@biddie.io is a pre-existing user.
    var users = {'daddy@biddie.io':{'password': '!Nader2009'}};

    this.post('/api/v1/users/', function(request) {
      // This hook "creates" a user if it doesn't exist and rejects otherwise.
      var email = window.getQueryParam(request.requestBody, 'email');
      var password = window.getQueryParam(request.requestBody, 'email');

      if (users[email] == null) {
        users[email] = {'password': password};
        return [200, {'Content-type': 'application/json'}, '{"id": 1, "on_waitlist":true}'];
      }
      else {
        return [200, {'Content-type': 'application/json'}, '{"message": "A user already exists with that email address.", "id": null, "success": false}'];
      }
    });
    this.get('/api/v1/users/1', function(request) {
      // This hook returns the information for daddy@biddie.io always..
      return [200, {'Content-type': 'application/json'}, '{"id": 1, "email": "daddy@biddie.io", "on_waitlist": true}'];
    });
    this.get('/api/v1/login/', function(request) {
      // This hook doesn't let anyone login without entering credentials.
      return [200, {'Content-Type': 'application/json'}, '{"id": null}'];
    });
    this.get('/api/v1/user_profiles/1/', function(request) {
      // This hook doesn't let anyone login without entering credentials.
      return [200, {'Content-Type': 'application/json'}, '{"id": 1}'];
    });
    this.delete('/api/v1/login/', function(request) {
      // This is the logout hook-- it doesn't need to do anything.
      return [200, {'Content-Type': 'application/json'}, '{"id": null}'];
    });
    this.post('/api/v1/login/', function(request) {
      // This hook returns a id of 1 if the user exists. Otherwise it returns
      // a id of null.
      var email = window.getQueryParam(request.requestBody, 'email');
      var password = window.getQueryParam(request.requestBody, 'password');

      if (users[email] != null && users[email].password === password) {
        return [200, {'Content-Type': 'application/json'}, '{"id": 1}'];
      }
      else {
        return [200, {'Content-Type': 'application/json'}, '{"id": null, "message": "Invalid email or password."}'];
      }
    });
  });
};


export var createOnboardingServer = function() {
  return new Pretender(function() {
    var waitlistedResponse = '{"id": 1, "email": "waitlisteduser@biddie.io", "on_waitlist": "True", "username": null}';
    var offWaitlistNotOnboardedResponse = '{"id": 2, "email": "onboardinguser@biddie.io", "on_waitlist": "False", "username": null}';
    var fullyOnboardedResponse = '{"id": 3, "email": "fullyonboardeduser@biddie.io", "on_waitlist": "False", "username": "daddy"}';

    this.post('/api/v1/login/', function(request) {
      debugger;
      // This is the login hook.
      var email = window.getQueryParam(request.requestBody, 'email');
      var password = window.getQueryParam(request.requestBody, 'email');

      if (email === "waitlisteduser@biddie.io") {
        return [200, {'Content-type': 'application/json'}, '{"id": 1, "success": true}'];
      }
      else if (email === "onboardinguser@biddie.io") {
        return [200, {'Content-type': 'application/json'}, '{"id": 2, "success": true}'];
      }
       else if (email === "fullyonboardeduser@biddie.io") {
        return [200, {'Content-type': 'application/json'}, '{"id": 3, "success": true}'];
      }
      else {
        return [200, {'Content-type': 'application/json'}, '{"message": "A user already exists with that email address.", "user_id": null, "success": false}'];
      }
    });

    this.post('/api/v1/users/', function(request) {
      var email = window.getQueryParam(request.requestBody, 'email');
      var password = window.getQueryParam(request.requestBody, 'email');

      if (email === "waitlisteduser@biddie.io") {
        return [200, {'Content-type': 'application/json'}, '{"id": 1, "success": true}'];
      }
    });

    this.get('/api/v1/login/', function(request) {
      // This hook doesn't let anyone login without entering credentials.
      return [200, {'Content-Type': 'application/json'}, '{"id": null}'];
    });

    this.get('/api/v1/users/1', function(request) {
      // This hook returns the information for daddy@biddie.io always..
      return [200, {'Content-type': 'application/json'}, waitlistedResponse];
    });

    this.get('/api/v1/users/2', function(request) {
      // This hook returns the information for daddy@biddie.io always..
      return [200, {'Content-type': 'application/json'}, offWaitlistNotOnboardedResponse];
    });

    this.get('/api/v1/users/3', function(request) {
      // This hook returns the information for daddy@biddie.io always..
      return [200, {'Content-type': 'application/json'}, fullyOnboardedResponse];
    });
  });
};

